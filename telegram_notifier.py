# telegram_notifier.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –æ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö –∏ —Å—Ç–∞–≤–∫–∞—Ö
"""

import os
import json
import requests
import logging
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("TelegramNotifier")


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, token=None, chat_id=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id (str): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.token = token or TELEGRAM_BOT_TOKEN
        self.chat_id = chat_id or TELEGRAM_CHAT_ID
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        
        if not self.token or not self.chat_id:
            logger.warning("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
    
    def send_message(self, text):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        if not self.token or not self.chat_id:
            return False
        
        try:
            url = f"{self.api_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': text,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data)
            response.raise_for_status()
            
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    def notify_value_bet(self, bet_data):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ
        
        Args:
            bet_data (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–≤–∫–µ
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞–≤–∫–∏
            outcome = bet_data['outcome']
            if outcome in ['1', 'X', '2']:
                if outcome == '1':
                    bet_type = "–ü1 (–ø–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤)"
                elif outcome == 'X':
                    bet_type = "–• (–Ω–∏—á—å—è)"
                else:
                    bet_type = "–ü2 (–ø–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π)"
            elif outcome.startswith('Over') or outcome.startswith('Under'):
                bet_type = outcome
            else:
                bet_type = outcome
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"*üî• –¶–ï–ù–ù–ê–Ø –°–¢–ê–í–ö–ê üî•*\n\n"
            message += f"*–ú–∞—Ç—á:* {bet_data['home_team']} vs {bet_data['away_team']}\n"
            message += f"*–î–∞—Ç–∞:* {bet_data['date']}\n"
            message += f"*–°—Ç–∞–≤–∫–∞:* {bet_type}\n"
            message += f"*–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:* {bet_data['odds']}\n"
            message += f"*–¶–µ–Ω–Ω–æ—Å—Ç—å:* {bet_data['value']*100:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥–Ω–æ–∑–µ
            if 'expected_goals' in bet_data:
                message += f"*–û–∂–∏–¥–∞–µ–º—ã–µ –≥–æ–ª—ã:*\n"
                message += f"- {bet_data['home_team']}: {bet_data['expected_goals']['home']}\n"
                message += f"- {bet_data['away_team']}: {bet_data['expected_goals']['away']}\n"
            
            message += f"\nüí∞ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç–∞–≤–∫–∞:* {bet_data.get('amount', 0)} –µ–¥."
            
            return self.send_message(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞–≤–∫–µ: {e}")
            return False
    
    def notify_daily_predictions(self, predictions, max_bets=5):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        
        Args:
            predictions (list): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            max_bets (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö —Å—Ç–∞–≤–æ–∫
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        try:
            today = datetime.now().strftime("%Y-%m-%d")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_predictions = [
                p for p in predictions 
                if p.get('date', '').startswith(today)
            ]
            
            if not today_predictions:
                logger.info(f"–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today})")
                return True
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–æ–∫
            valuable_predictions = []
            for pred in today_predictions:
                for bet in pred.get('valuable_bets', []):
                    valuable_predictions.append({
                        'match_id': pred['match_id'],
                        'date': pred['date'],
                        'home_team': pred['home_team'],
                        'away_team': pred['away_team'],
                        'outcome': bet['outcome'],
                        'odds': bet['odds'],
                        'value': bet['value'],
                        'expected_goals': pred['expected_goals']
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            valuable_predictions = sorted(valuable_predictions, key=lambda x: x['value'], reverse=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"*üìä –ü–†–û–ì–ù–û–ó–´ –ù–ê {today} üìä*\n\n"
            
            if valuable_predictions:
                message += f"*–¢–æ–ø {min(max_bets, len(valuable_predictions))} —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:*\n\n"
                
                for i, bet in enumerate(valuable_predictions[:max_bets], 1):
                    outcome_name = "–ü1" if bet['outcome'] == '1' else "–•" if bet['outcome'] == 'X' else "–ü2"
                    message += f"{i}. *{bet['home_team']} vs {bet['away_team']}*\n"
                    message += f"   –°—Ç–∞–≤–∫–∞: {outcome_name}, –ö–æ—ç—Ñ: {bet['odds']}, –¶–µ–Ω–Ω–æ—Å—Ç—å: {bet['value']*100:.1f}%\n"
                    message += f"   –ü—Ä–æ–≥–Ω–æ–∑: {bet['home_team']} {bet['expected_goals']['home']} - {bet['expected_goals']['away']} {bet['away_team']}\n\n"
            else:
                message += "üîç –ù–µ—Ç —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
            
            message += "–£–¥–∞—á–∏! üçÄ"
            
            return self.send_message(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return False


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ config.py")
    else:
        notifier = TelegramNotifier()
        notifier.send_message("üëã –ü—Ä–∏–≤–µ—Ç! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")